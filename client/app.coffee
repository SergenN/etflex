# app.coffee contains the instance of the main application router, as
# well as any other objects which are considered "singletons", such as
# full-page views.

# Tells you if the application has been booted. Simple, "stand-alone" pages
# may use parts of the client code (such as a navigation menus) without
# booting the whole client.
exports.isBooted = false

# Holds the instantiated routers so that we can refer to them later.
exports.routers = {}

# Holds each of the main model collections (Sliders, Widgets, etc).
exports.collections = {}

# Called _once_ when the application is first loaded in the browser. Rails
# controllers which mixin ClientController will use this method, while those
# which do not will instead use exports.minimal().
exports.boot = (window, { locale, api, env, user }) ->
  commonBoot window, locale, env, user

  require('lib/api').setPath api

  exports.collections.scenes =
    new (require('collections/scenes').Scenes)

  exports.collections.scenarios =
    new (require('collections/scenarios').Scenarios)

  # Ensure that boot cannot be called again.
  exports.boot = (->)
  exports.isBooted = true

  # Additional setup can be added here; tasks which can be executed in
  # parallel (API requests) should use async.parallel:
  #
  #   async.parallel one: something, two: somethingElse, postBoot
  #
  # ... for now we just call postBoot straight away.

  postBoot undefined, {}

# Starts a minimal version of the client, used on static pages where we just
# want to show HTML generated by the Rails app.
exports.minimal = (window, { locale, api, env, user }) ->
  commonBoot window, locale, env, user

  exports.routers.minimal = new (require('routers/minimal').Minimal)

  # Fire up Backbone routing...
  Backbone.history.start pushState: true

# A wrapper around Backbone.Router::navigate which selects the correct router
# depending on the URL, and by default will run the action defined the router
# (Backbone by default does not do this).
#
exports.navigate = (url, options = {}) ->
  # Remove leading slash, if present.
  url = url.slice(1, url.length) if url.slice(0, 1) is '/'

  unless options.hasOwnProperty 'trigger'
    options.trigger = true

  exports.routers.main.navigate url, options

# Bootstrap Functions, execute in parallel -----------------------------------

# Called after all the other boot functions have completed.
#
# Issues a warning if one of the functions failed, otherwise finishes set-up
# of the application. Any part of the app set-up which depends must occur
# _after_ the asynchronous boostrap function should go here.
#
postBoot = (err, result) ->
  if err?
    console.error "Could not initialize application.", err
  else
    exports.routers.main = new (require('routers/main').Main)

    # Fire up Backbone routing...
    Backbone.history.start pushState: true

# Helper Functions -----------------------------------------------------------

# Tasks performed when loading CoffeeScripts by both the full client, and the
# minimal version.
commonBoot = (window, locale, env, user) ->
  installConsolePolyfill window

  exports.env    = env
  exports.user   = new (require('models/user').User) user

  I18n.locale    = locale
  I18n.fallbacks = no

installConsolePolyfill = (window) ->
  unless 'console' of window
    window.console = { log: (->), info: (->), warn: (->), error: (->) }

# Returns if the application is being run in the staging environment.
exports.isBeta = () ->
  window.location.hostname.match(/beta/)?
